// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum AccessType {
    CREATE
    UPDATE
    DELETE
    ACCESS
}

enum ResourceType {
    ACCESS
    ROLE
    USER
    DEMO
}

enum RoleType {
    ADMIN
    MANAGER
    EMPLOYEE
    CUSTOMER

    @@map("Role")
}

model User {
    id           Int        @id @default(autoincrement())
    login        String     @unique
    password     String
    firstName    String?
    lastName     String?
    language     String?
    refreshToken String?
    isActive     Boolean    @default(false)
    roles        UserRole[]

    createdAt     DateTime  @default(now())
    createdUserId Int?
    updatedAt     DateTime  @updatedAt
    updatedUserId Int?
    deletedAt     DateTime?
    deletedUserId Int?
    version       Int       @default(1)
}

model UserRole {
    id       Int      @id @default(autoincrement())
    userId   Int
    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    roleType RoleType

    createdAt     DateTime  @default(now())
    createdUserId Int?
    updatedAt     DateTime  @updatedAt
    updatedUserId Int?
    deletedAt     DateTime?
    deletedUserId Int?
    version       Int       @default(1)

    @@unique([userId, roleType])
}

model Access {
    id           Int          @id @default(autoincrement())
    roleType     RoleType
    resourceType ResourceType
    accessType   AccessType

    createdAt     DateTime  @default(now())
    createdUserId Int?
    updatedAt     DateTime  @updatedAt
    updatedUserId Int?
    deletedAt     DateTime?
    deletedUserId Int?
    version       Int       @default(1)

    @@unique([roleType, resourceType, accessType])
}
