/* tslint:disable */
/* eslint-disable */
/**
 * app-template REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
    DUMMY_BASE_URL,
    assertParamExists,
    setApiKeyToObject,
    setBasicAuthToObject,
    setBearerAuthToObject,
    setOAuthToObject,
    setSearchParams,
    serializeDataIfNeeded,
    toPathString,
    createRequestFunction,
} from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 *
 * @export
 * @interface CreateUserDto
 */
export interface CreateUserDto {
    /**
     *
     * @type {string}
     * @memberof CreateUserDto
     */
    login: string;
    /**
     *
     * @type {string}
     * @memberof CreateUserDto
     */
    password: string;
    /**
     *
     * @type {string}
     * @memberof CreateUserDto
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof CreateUserDto
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof CreateUserDto
     */
    language?: string;
    /**
     *
     * @type {boolean}
     * @memberof CreateUserDto
     */
    isActive?: boolean;
}
/**
 *
 * @export
 * @interface CreateUserRoleDto
 */
export interface CreateUserRoleDto {
    /**
     *
     * @type {number}
     * @memberof CreateUserRoleDto
     */
    userId: number;
    /**
     *
     * @type {string}
     * @memberof CreateUserRoleDto
     */
    role: string;
}
/**
 *
 * @export
 * @interface UpdateUserDto
 */
export interface UpdateUserDto {
    /**
     *
     * @type {string}
     * @memberof UpdateUserDto
     */
    login?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateUserDto
     */
    password?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateUserDto
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateUserDto
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateUserDto
     */
    language?: string;
    /**
     *
     * @type {boolean}
     * @memberof UpdateUserDto
     */
    isActive?: boolean;
}
/**
 *
 * @export
 * @interface UpdateUserRoleDto
 */
export interface UpdateUserRoleDto {
    /**
     *
     * @type {number}
     * @memberof UpdateUserRoleDto
     */
    userId?: number;
    /**
     *
     * @type {string}
     * @memberof UpdateUserRoleDto
     */
    role?: string;
}
/**
 *
 * @export
 * @interface UserEntity
 */
export interface UserEntity {
    /**
     *
     * @type {number}
     * @memberof UserEntity
     */
    id: number;
    /**
     *
     * @type {string}
     * @memberof UserEntity
     */
    login: string;
    /**
     *
     * @type {Array<string>}
     * @memberof UserEntity
     */
    roles: Array<string>;
    /**
     *
     * @type {string}
     * @memberof UserEntity
     */
    firstName: string;
    /**
     *
     * @type {string}
     * @memberof UserEntity
     */
    lastName: string;
    /**
     *
     * @type {string}
     * @memberof UserEntity
     */
    language: string;
    /**
     *
     * @type {boolean}
     * @memberof UserEntity
     */
    isActive: boolean;
    /**
     *
     * @type {Date}
     * @memberof UserEntity
     */
    createdAt: Date;
    /**
     *
     * @type {Date}
     * @memberof UserEntity
     */
    updatedAt: Date;
    /**
     *
     * @type {Date}
     * @memberof UserEntity
     */
    deletedAt: Date;
    /**
     *
     * @type {number}
     * @memberof UserEntity
     */
    version: number;
}
/**
 *
 * @export
 * @interface UserRoleEntity
 */
export interface UserRoleEntity {
    /**
     *
     * @type {number}
     * @memberof UserRoleEntity
     */
    id: number;
    /**
     *
     * @type {number}
     * @memberof UserRoleEntity
     */
    userId: number;
    /**
     *
     * @type {string}
     * @memberof UserRoleEntity
     */
    role: string;
}

/**
 * UserRolesApi - axios parameter creator
 * @export
 */
export const UserRolesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {CreateUserRoleDto} createUserRoleDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRolesCreate: async (
            createUserRoleDto: CreateUserRoleDto,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'createUserRoleDto' is not null or undefined
            assertParamExists('userRolesCreate', 'createUserRoleDto', createUserRoleDto);
            const localVarPath = `/api/user-roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                createUserRoleDto,
                localVarRequestOptions,
                configuration,
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRolesFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user-roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRolesFindOne: async (
            id: number,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userRolesFindOne', 'id', id);
            const localVarPath = `/api/user-roles/{id}`.replace(
                `{${'id'}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRolesRemove: async (
            id: number,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userRolesRemove', 'id', id);
            const localVarPath = `/api/user-roles/{id}`.replace(
                `{${'id'}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {UpdateUserRoleDto} updateUserRoleDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRolesUpdate: async (
            id: number,
            updateUserRoleDto: UpdateUserRoleDto,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userRolesUpdate', 'id', id);
            // verify required parameter 'updateUserRoleDto' is not null or undefined
            assertParamExists('userRolesUpdate', 'updateUserRoleDto', updateUserRoleDto);
            const localVarPath = `/api/user-roles/{id}`.replace(
                `{${'id'}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                updateUserRoleDto,
                localVarRequestOptions,
                configuration,
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * UserRolesApi - functional programming interface
 * @export
 */
export const UserRolesApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = UserRolesApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {CreateUserRoleDto} createUserRoleDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userRolesCreate(
            createUserRoleDto: CreateUserRoleDto,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRoleEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userRolesCreate(
                createUserRoleDto,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['UserRolesApi.userRolesCreate']?.[localVarOperationServerIndex]
                    ?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userRolesFindAll(
            options?: RawAxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserRoleEntity>>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userRolesFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['UserRolesApi.userRolesFindAll']?.[localVarOperationServerIndex]
                    ?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userRolesFindOne(
            id: number,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRoleEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userRolesFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['UserRolesApi.userRolesFindOne']?.[localVarOperationServerIndex]
                    ?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userRolesRemove(
            id: number,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRoleEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userRolesRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['UserRolesApi.userRolesRemove']?.[localVarOperationServerIndex]
                    ?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {number} id
         * @param {UpdateUserRoleDto} updateUserRoleDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userRolesUpdate(
            id: number,
            updateUserRoleDto: UpdateUserRoleDto,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRoleEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userRolesUpdate(
                id,
                updateUserRoleDto,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['UserRolesApi.userRolesUpdate']?.[localVarOperationServerIndex]
                    ?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
    };
};

/**
 * UserRolesApi - factory interface
 * @export
 */
export const UserRolesApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    const localVarFp = UserRolesApiFp(configuration);
    return {
        /**
         *
         * @param {CreateUserRoleDto} createUserRoleDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRolesCreate(
            createUserRoleDto: CreateUserRoleDto,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<UserRoleEntity> {
            return localVarFp
                .userRolesCreate(createUserRoleDto, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRolesFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<UserRoleEntity>> {
            return localVarFp.userRolesFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRolesFindOne(
            id: number,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<UserRoleEntity> {
            return localVarFp
                .userRolesFindOne(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRolesRemove(id: number, options?: RawAxiosRequestConfig): AxiosPromise<UserRoleEntity> {
            return localVarFp
                .userRolesRemove(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} id
         * @param {UpdateUserRoleDto} updateUserRoleDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRolesUpdate(
            id: number,
            updateUserRoleDto: UpdateUserRoleDto,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<UserRoleEntity> {
            return localVarFp
                .userRolesUpdate(id, updateUserRoleDto, options)
                .then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserRolesApi - object-oriented interface
 * @export
 * @class UserRolesApi
 * @extends {BaseAPI}
 */
export class UserRolesApi extends BaseAPI {
    /**
     *
     * @param {CreateUserRoleDto} createUserRoleDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserRolesApi
     */
    public userRolesCreate(createUserRoleDto: CreateUserRoleDto, options?: RawAxiosRequestConfig) {
        return UserRolesApiFp(this.configuration)
            .userRolesCreate(createUserRoleDto, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserRolesApi
     */
    public userRolesFindAll(options?: RawAxiosRequestConfig) {
        return UserRolesApiFp(this.configuration)
            .userRolesFindAll(options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserRolesApi
     */
    public userRolesFindOne(id: number, options?: RawAxiosRequestConfig) {
        return UserRolesApiFp(this.configuration)
            .userRolesFindOne(id, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserRolesApi
     */
    public userRolesRemove(id: number, options?: RawAxiosRequestConfig) {
        return UserRolesApiFp(this.configuration)
            .userRolesRemove(id, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} id
     * @param {UpdateUserRoleDto} updateUserRoleDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserRolesApi
     */
    public userRolesUpdate(
        id: number,
        updateUserRoleDto: UpdateUserRoleDto,
        options?: RawAxiosRequestConfig,
    ) {
        return UserRolesApiFp(this.configuration)
            .userRolesUpdate(id, updateUserRoleDto, options)
            .then((request) => request(this.axios, this.basePath));
    }
}

/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {CreateUserDto} createUserDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersCreate: async (
            createUserDto: CreateUserDto,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'createUserDto' is not null or undefined
            assertParamExists('usersCreate', 'createUserDto', createUserDto);
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                createUserDto,
                localVarRequestOptions,
                configuration,
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersFindInactive: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/inactive`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersFindOne: async (
            id: number,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersFindOne', 'id', id);
            const localVarPath = `/api/users/{id}`.replace(
                `{${'id'}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersFindRemoved: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/removed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRemove: async (
            id: number,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersRemove', 'id', id);
            const localVarPath = `/api/users/{id}`.replace(
                `{${'id'}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRestore: async (
            id: number,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersRestore', 'id', id);
            const localVarPath = `/api/users/{id}/restore`.replace(
                `{${'id'}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {UpdateUserDto} updateUserDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUpdate: async (
            id: number,
            updateUserDto: UpdateUserDto,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersUpdate', 'id', id);
            // verify required parameter 'updateUserDto' is not null or undefined
            assertParamExists('usersUpdate', 'updateUserDto', updateUserDto);
            const localVarPath = `/api/users/{id}`.replace(
                `{${'id'}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                updateUserDto,
                localVarRequestOptions,
                configuration,
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {CreateUserDto} createUserDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersCreate(
            createUserDto: CreateUserDto,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersCreate(
                createUserDto,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['UsersApi.usersCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersFindAll(
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserEntity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['UsersApi.usersFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersFindInactive(
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserEntity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersFindInactive(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['UsersApi.usersFindInactive']?.[localVarOperationServerIndex]
                    ?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersFindOne(
            id: number,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['UsersApi.usersFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersFindRemoved(
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserEntity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersFindRemoved(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['UsersApi.usersFindRemoved']?.[localVarOperationServerIndex]
                    ?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersRemove(
            id: number,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['UsersApi.usersRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersRestore(
            id: number,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersRestore(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['UsersApi.usersRestore']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {number} id
         * @param {UpdateUserDto} updateUserDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersUpdate(
            id: number,
            updateUserDto: UpdateUserDto,
            options?: RawAxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersUpdate(
                id,
                updateUserDto,
                options,
            );
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['UsersApi.usersUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
    };
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    const localVarFp = UsersApiFp(configuration);
    return {
        /**
         *
         * @param {CreateUserDto} createUserDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersCreate(
            createUserDto: CreateUserDto,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<UserEntity> {
            return localVarFp
                .usersCreate(createUserDto, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<UserEntity>> {
            return localVarFp.usersFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersFindInactive(options?: RawAxiosRequestConfig): AxiosPromise<Array<UserEntity>> {
            return localVarFp
                .usersFindInactive(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersFindOne(id: number, options?: RawAxiosRequestConfig): AxiosPromise<UserEntity> {
            return localVarFp.usersFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersFindRemoved(options?: RawAxiosRequestConfig): AxiosPromise<Array<UserEntity>> {
            return localVarFp.usersFindRemoved(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRemove(id: number, options?: RawAxiosRequestConfig): AxiosPromise<UserEntity> {
            return localVarFp.usersRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRestore(id: number, options?: RawAxiosRequestConfig): AxiosPromise<UserEntity> {
            return localVarFp.usersRestore(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} id
         * @param {UpdateUserDto} updateUserDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUpdate(
            id: number,
            updateUserDto: UpdateUserDto,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<UserEntity> {
            return localVarFp
                .usersUpdate(id, updateUserDto, options)
                .then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     *
     * @param {CreateUserDto} createUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersCreate(createUserDto: CreateUserDto, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration)
            .usersCreate(createUserDto, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersFindAll(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration)
            .usersFindAll(options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersFindInactive(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration)
            .usersFindInactive(options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersFindOne(id: number, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration)
            .usersFindOne(id, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersFindRemoved(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration)
            .usersFindRemoved(options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersRemove(id: number, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration)
            .usersRemove(id, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersRestore(id: number, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration)
            .usersRestore(id, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} id
     * @param {UpdateUserDto} updateUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersUpdate(id: number, updateUserDto: UpdateUserDto, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration)
            .usersUpdate(id, updateUserDto, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
